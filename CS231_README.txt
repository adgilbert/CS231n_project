To train the resnet make sure that the datasets are in the dataset folder and unzipped. I use the naming convention aug_ego for the augmented ego training dataset and val_2d for the validation dataset in 2d. Inside these folders you should have an images folder with all the pictures for the data and a file called dataset.mat which has all the paths to the images and the joint locations. 
've stored the dataset.mat files in models/mpii/test/aug_data -- the two files aug_ego_dataset.mat and val_2d_dataset.mat should be moved into their correct folders in the dataset directory and should be renamed to just dataset.mat to use my existing calls. 

For training go to the models/mpii/train folder and edit the pose_cfg file which has the training parameters. Make sure that the dataset points to the right folder such as aug_ego in the dataset directory (it should be good). Make sure that the initialized weights are to the correct address. You will want to make sure it's set to the resnet101 and not the snapshot weights so uncomment the resnet101 initial weighting in my training file. Also make sure you download the pretrained files by going into the models/mpii/pretrained folder and running their .sh script to download the initial weights. Then make sure you tune the parameters of training to how you want them.

For testing go to models/mpii/test and edit the pose_cfg making sure the validation dataset address is correct, you also have to set the snapshot directory. To do this, copy the snapshot-##### files that are output in the models/mpii/train folder after you're done training (there should be 3 with the endings .meta .index and like .data-00000-of-00001) all into a folder that you can address them to. The path to this directory should be path/folder_with_all_3_files/snapshot-##### but don't put any of the endings onto this name. This will spit out a predictions.mat file. Place this file and the dataset.mat file from the validation dataset into a folder in the models/mpii/test folder and copy the data.py file into this as well. Run data.py to get the euclidean dist between predicted and actual. 
